# -*- coding: utf-8 -*-
"""3(9)_MP3_to_text_&_Mongo_database.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uubs7I2WDRm6HLsXH3oqYae6daThdHVW
"""

import noisereduce as nr
import librosa
import librosa.display
import numpy as np
import soundfile as sf
import whisper
import torch
import torchaudio
from transformers import AutoProcessor, Wav2Vec2ForCTC
from pymongo import MongoClient
import os

# MongoDB connection setup (do it once at the start)
client = MongoClient('mongodb://localhost:27017/')
db = client['your_database_name']
observations_collection = db['Observations']  # The collection where MP3s and transcriptions will be stored

# Function to upload MP3 and transcription to MongoDB
def upload_mp3_and_transcription_to_mongo(mp3_file_path, transcription_text):
    filename = os.path.basename(mp3_file_path)

    checklist_name, version, date_str, time_str = extract_date_time_version_from_filename(filename)

    if checklist_name and version and date_str and time_str:
        # Prepare data to be stored in MongoDB
        observation_data = {
            "filename": filename,
            "checklist_name": checklist_name,  # Name of the checklist
            "file_date": date_str,  # Extracted date
            "file_time": time_str,  # Extracted time
            "version": version,     # Version of the checklist
            "mp3_file_path": mp3_file_path,  # Path to MP3 file
            "transcription": transcription_text  # The transcription of the MP3
        }

        # Insert observation data into MongoDB
        observations_collection.insert_one(observation_data)
        print(f"MP3 {filename} and transcription uploaded to MongoDB with version {version} on date {date_str}")

# Function to extract the date, version, and time from the filename
def extract_date_time_version_from_filename(filename):
    try:
        parts = filename.split('_')
        checklist_name = parts[0]
        version = parts[1]
        date_str = parts[2]  # Assuming date is in YYYYMMDD format
        time_str = parts[3].split('.')[0]  # Time (excluding extension)
        return checklist_name, version, date_str, time_str
    except Exception as e:
        print(f"Error extracting date, version, and time from filename: {e}")
        return None, None, None, None

# Function to transcribe the MP3 file
def transcribe_mp3(mp3_file_path):
    # Apply noise reduction
    y, sr = librosa.load(mp3_file_path, sr=None)
    noise_part = y[:sr]  # Assuming the first second is noise
    reduced_audio = nr.reduce_noise(y=y, sr=sr, y_noise=noise_part)
    sf.write("cleaned_audio.wav", reduced_audio, sr)
    print("Noise reduction applied. Saved as 'cleaned_audio.wav'")

    # Whisper transcription model
    whisper_model = whisper.load_model("small")
    result = whisper_model.transcribe("cleaned_audio.wav")
    whisper_transcription = result['text']
    print(f"Whisper Transcription: {whisper_transcription}")

    # Wav2Vec2 transcription model (using transformers)
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_name = "facebook/wav2vec2-large-960h"
    processor = AutoProcessor.from_pretrained(model_name)
    wav2vec_model = Wav2Vec2ForCTC.from_pretrained(model_name).to(device)

    waveform, sample_rate = torchaudio.load("cleaned_audio.wav")
    waveform = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=16000)(waveform)
    waveform = waveform.mean(dim=0, keepdim=True)

    input_values = processor(waveform.squeeze(), return_tensors="pt", sampling_rate=16000).input_values.to(device)

    with torch.no_grad():
        logits = wav2vec_model(input_values).logits

    predicted_ids = torch.argmax(logits, dim=-1)
    wav2vec_transcription = processor.batch_decode(predicted_ids)[0]
    print(f"Wav2Vec2 Transcription: {wav2vec_transcription}")

    # Combine transcriptions (you can choose to store one or both, here we're combining them)
    combined_transcription = f"Whisper: {whisper_transcription}\nWav2Vec2: {wav2vec_transcription}"

    return combined_transcription

# Example usage
mp3_file_path = '/path/to/mp3/file/filename_version_date_time.mp3'  # Example MP3 file path

# Transcribe the MP3 file
transcription_text = transcribe_mp3(mp3_file_path)

# Upload the MP3 and transcription to MongoDB
upload_mp3_and_transcription_to_mongo(mp3_file_path, transcription_text)

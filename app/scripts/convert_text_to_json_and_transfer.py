# -*- coding: utf-8 -*-
"""12(12)_Convert_the_text_in_Mongo_to_JSON_and_transfer_to_the_field_device_via_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fUw4CQ2JCeY_2f_oR7EbZSllUwAh-kft
"""

!pip install pymssql

import pymssql

# MSSQL Connection details
mssql_server = 'rfocentral02.database.windows.net'
mssql_database = 'RFOCentral_Dev3'
mssql_username = 'AiProjectTestUser'
mssql_password = '7GJ407c^uOY['
mssql_table = 'AttachmentXRef'

# Function to connect to MSSQL using pymssql and check connection
def connect_to_mssql():
    try:
        # Establish connection
        connection = pymssql.connect(
            server=mssql_server,
            user=mssql_username,
            password=mssql_password,
            database=mssql_database
        )

        # Create a cursor and execute a simple query to check connection
        cursor = connection.cursor()
        cursor.execute("SELECT 1")  # Simple query to test the connection
        result = cursor.fetchone()

        # Check if the query returned a result
        if result:
            print("Successfully connected to MSSQL!")
            return connection, cursor
        else:
            print("Connection check failed.")
            return None, None

    except Exception as e:
        print(f"Error connecting to MSSQL: {e}")
        return None, None

# Call the function to test the connection
connection, cursor = connect_to_mssql()
if connection:
    # Connection is successful, proceed with your operations
    print("Ready to interact with MSSQL.")
else:
    # Connection failed, handle the error
    print("Unable to connect to MSSQL.")

"""# Connecting the MongoDB (AI - Database)"""

!pip install pymongo pdf2image pytesseract easyocr gTTS pydub

import os
from pymongo import MongoClient
import gridfs
import pymssql

# MongoDB Connection URI
mongo_uri = "mongodb+srv://AIDatabase:BTColombia2022@sandbox.bxohv.mongodb.net/?retryWrites=true&w=majority&appName=sandbox"
mongo_db_name = "AIDatabase"
mongo_collection = "fs.files"  # Specify the collection name

# Connect to MongoDB
try:
    client = MongoClient(mongo_uri)
    db = client['AIDatabase']  # Replace with your database name
    fs = gridfs.GridFS(db)     # For storing files in MongoDB
    print("Successfully connected to MongoDB!")
except Exception as e:
    print(f"Error connecting to MongoDB: {e}")
    exit()

"""# Integrating the new PDF tags into the RFO Central database"""

pip install streamlit numpy pillow easyocr ultralytics pymssql

pip install opencv-python

!sudo apt-get update
!sudo apt-get install -y libgl1-mesa-glx

"""## Extrcating the text tags from the image"""

import cv2
import numpy as np
import easyocr
from ultralytics import YOLO
import os

# --- Initialize EasyOCR reader ---
reader = easyocr.Reader(['en'], verbose=True)

# --- Load the YOLO model ---
model_path = "/workspaces/optilabor/yolov5su.pt"  # Path to your YOLO model
model = YOLO(model_path)

# --- Path to your image ---
img_path = "/workspaces/optilabor/A420-00754.png"

# --- Read the image ---
img = cv2.imread(img_path)
original_img = img.copy()

# --- Perform YOLO Symbol Detection ---
print("Running YOLO for symbol detection...")
results = model(img)

# Initialize list to hold tags
all_detected_tags = []

# Access bounding boxes, labels, and confidence scores from YOLO
for *xyxy, conf, cls in results[0].boxes.data:
    label = model.names[int(cls)]
    x_min, y_min, x_max, y_max = map(int, xyxy)
    print(f"Detected: {label} with confidence {conf:.2f}")

    # Extract the detected label (tag) and add to the list
    all_detected_tags.append(label)

    # Annotate the image (optional, for visualization)
    cv2.rectangle(img, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)

# --- Display annotated image (for visual confirmation) ---
annotated_img_path = "yolo_annotated_image.png"
cv2.imwrite(annotated_img_path, img)
print(f"Annotated image saved as {annotated_img_path}")

# --- EasyOCR Text Extraction ---
print("Running EasyOCR for text detection...")

# Preprocessing for contours (similar to your provided code)
gray = cv2.cvtColor(original_img, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)
edges = cv2.Canny(blurred, 50, 150)
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
dilated = cv2.dilate(edges, kernel, iterations=2)
contours, _ = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Initialize list to hold OCR detected text
ocr_detected_texts = []

# Detect and annotate instrument shapes
instrument_shapes = []
for contour in contours:
    x, y, w, h = cv2.boundingRect(contour)
    if 50 < w < 500 and 50 < h < 500:
        instrument_shapes.append((x, y, w, h))
        cv2.rectangle(original_img, (x, y), (x + w, y + h), (255, 0, 0), 2)

# Extract text from detected shapes using EasyOCR
for i, (x, y, w, h) in enumerate(instrument_shapes):
    cropped_shape = img[y:y + h, x:x + w]
    text = reader.readtext(cropped_shape, detail=0)
    extracted_text = " ".join(text) if text else "No text detected"
    print(f"Text extracted from shape {i + 1}: {extracted_text}")

    # Add the extracted text to the list of OCR tags
    ocr_detected_texts.append(extracted_text)

# --- Save processed image with detected shapes ---
processed_img_path = "processed_image_with_shapes.png"
cv2.imwrite(processed_img_path, original_img)
print(f"Processed image with shapes saved as {processed_img_path}")

# --- Combine YOLO and OCR results ---
final_detected_tags = all_detected_tags + ocr_detected_texts

# Display the detected tags
print("Final detected tags from YOLO and EasyOCR:")
for tag in final_detected_tags:
    print(tag)

# The variable `final_detected_tags` contains both the YOLO and OCR tags

print(final_detected_tags)

"""## Submitting the tags to the mssql server and the table"""

import pymssql



# FileName to insert
file_name = "A420-00754"


print("Submitting FileName and Tags to MSSQL...")

try:
    # Connect to SQL Server
    conn = pymssql.connect(
        server=mssql_server,
        user=mssql_username,
        password=mssql_password,
        database=mssql_database
    )
    cursor = conn.cursor()

    # Check if the FileName already exists in the table
    cursor.execute(f"SELECT ID FROM {mssql_table} WHERE FileName = %s", (file_name,))
    row_id = cursor.fetchone()

    if row_id:
        # If FileName exists, only insert tags into AITagNew column
        print(f"FileName '{file_name}' exists. Inserting tags...")

        for tag in final_detected_tags:
            # Skip invalid or placeholder tags
            if not tag.strip() or tag.lower() == "no text detected":
                continue

            # Check if the combination of FileName and AITagNew already exists
            cursor.execute(f"""
            IF NOT EXISTS (
                SELECT 1 FROM {mssql_table} WHERE FileName = %s AND AITagNew = %s
            )
            BEGIN
                INSERT INTO {mssql_table} (FileName, AITagNew)
                VALUES (%s, %s)
            END
            """, (file_name, tag, file_name, tag))

        conn.commit()
        print("Tags successfully submitted to the database.")
    else:
        # If FileName doesn't exist, insert it and then insert the tags
        print(f"FileName '{file_name}' does not exist. Inserting new entry...")

        # Insert the image file name
        cursor.execute(f"""
        INSERT INTO {mssql_table} (FileName)
        VALUES (%s)
        """, (file_name,))
        conn.commit()

        # Fetch the newly inserted row's ID
        cursor.execute(f"SELECT ID FROM {mssql_table} WHERE FileName = %s", (file_name,))
        row_id = cursor.fetchone()

        if row_id:
            # Insert tags into AITagNew column for the new row
            for tag in final_detected_tags:
                if not tag.strip() or tag.lower() == "no text detected":
                    continue

                # Check if the combination of FileName and AITagNew already exists
                cursor.execute(f"""
                IF NOT EXISTS (
                    SELECT 1 FROM {mssql_table} WHERE FileName = %s AND AITagNew = %s
                )
                BEGIN
                    INSERT INTO {mssql_table} (FileName, AITagNew)
                    VALUES (%s, %s)
                END
                """, (file_name, tag, file_name, tag))

            conn.commit()
            print("Tags successfully submitted to the new row.")
        else:
            print("Failed to retrieve the row ID for the new FileName.")

except pymssql.Error as e:
    print(f"Database error: {e}")

finally:
    conn.close()

print("Processing completed.")

try:
    # Connect to SQL Server
    conn = pymssql.connect(
        server=mssql_server,
        user=mssql_username,
        password=mssql_password,
        database=mssql_database
    )
    cursor = conn.cursor()

    # Insert each tag into the AITagNew column, appending it to the FileName
    for tag in final_detected_tags:
        # Skip invalid or placeholder tags
        if not tag.strip() or tag.lower() == "no text detected":
            continue

        # Format the new FileName by appending "_tag_<tag>"
        new_file_name = f"{file_name}_tag_{tag}"

        # Insert the tag into the AITagNew column, and use the formatted FileName
        cursor.execute(f"""
        INSERT INTO {mssql_table} (FileName, AITagNew)
        VALUES (%s, %s)
        """, (new_file_name, tag))

    conn.commit()
    print("Tags successfully submitted to the database.")

except pymssql.Error as e:
    print(f"Database error: {e}")

finally:
    conn.close()

print("Processing completed.")

"""# Generating the JSON file"""

import json
import requests
import cv2
import easyocr
from ultralytics import YOLO
from pymongo import MongoClient
import gridfs
import pymssql

# MongoDB and MSSQL Connection Details
mongo_uri = "mongodb+srv://AIDatabase:BTColombia2022@sandbox.bxohv.mongodb.net/?retryWrites=true&w=majority&appName=sandbox"
mongo_db_name = "AIDatabase"
mssql_server = 'rfocentral02.database.windows.net'
mssql_database = 'RFOCentral_Dev3'
mssql_username = 'AiProjectTestUser'
mssql_password = '7GJ407c^uOY['
mssql_table = 'AttachmentXRef'

# MongoDB Connection
try:
    client = MongoClient(mongo_uri)
    db = client['AIDatabase']
    fs = gridfs.GridFS(db)
    print("Successfully connected to MongoDB!")
except Exception as e:
    print(f"Error connecting to MongoDB: {e}")
    exit()

# Initialize OCR reader
reader = easyocr.Reader(['en'], verbose=True)

# Initialize YOLO model
model_path = "/workspaces/optilabor/yolov5su.pt"  # Path to your YOLO model
model = YOLO(model_path)

# Sample image
img_path = "/workspaces/optilabor/A420-00754.png"
img = cv2.imread(img_path)
original_img = img.copy()

# Run YOLO for symbol detection
results = model(img)
all_detected_tags = []
for *xyxy, conf, cls in results[0].boxes.data:
    label = model.names[int(cls)]
    all_detected_tags.append(label)

# OCR for text extraction
ocr_detected_texts = []
instrument_shapes = []
gray = cv2.cvtColor(original_img, cv2.COLOR_BGR2GRAY)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)
edges = cv2.Canny(blurred, 50, 150)
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
dilated = cv2.dilate(edges, kernel, iterations=2)
contours, _ = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

for contour in contours:
    x, y, w, h = cv2.boundingRect(contour)
    if 50 < w < 500 and 50 < h < 500:
        instrument_shapes.append((x, y, w, h))
        cropped_shape = img[y:y + h, x:x + w]
        text = reader.readtext(cropped_shape, detail=0)
        extracted_text = " ".join(text) if text else "No text detected"
        ocr_detected_texts.append(extracted_text)

# Combine YOLO and OCR results
final_detected_tags = all_detected_tags + ocr_detected_texts
print("Final detected tags:", final_detected_tags)

# Convert detected tags into JSON
tags_json = json.dumps({
    "file_name": "A420-00754",  # Example file name
    "tags": final_detected_tags
})
print("JSON formatted tags:", tags_json)

# API URL to transfer the tags to the field device
api_url = "https://example.com/api/receive_tags"

# Send the JSON data to the field device via API
try:
    response = requests.post(api_url, data=tags_json, headers={"Content-Type": "application/json"})

    if response.status_code == 200:
        print("Tags successfully transferred to the field device.")
    else:
        print(f"Failed to transfer tags. Status code: {response.status_code}")
except requests.exceptions.RequestException as e:
    print(f"Error sending data to the API: {e}")

from pymongo import MongoClient
import json

# MongoDB Connection URI
mongo_uri = "mongodb+srv://AIDatabase:BTColombia2022@sandbox.bxohv.mongodb.net/?retryWrites=true&w=majority&appName=sandbox"
mongo_db_name = "AIDatabase"
mongo_collection = "Reports"  # Specify the collection name

# Connect to MongoDB
try:
    client = MongoClient(mongo_uri)
    db = client[mongo_db_name]
    collection = db[mongo_collection]
    print("Successfully connected to MongoDB!")
except Exception as e:
    print(f"Error connecting to MongoDB: {e}")
    exit()

# Function to convert Mongo data to JSON and save to 'Reports' collection
def save_report_to_mongo(report_data):
    try:
        # Create a report entry in MongoDB
        report_entry = {
            "report_data": report_data,
            "created_at": datetime.datetime.now()
        }

        # Insert the report into the collection
        collection.insert_one(report_entry)
        print("Report successfully saved to MongoDB collection 'Reports'.")
    except Exception as e:
        print(f"Error saving report to MongoDB: {e}")

# Example of using the function to save JSON data to MongoDB
json_report_data = {"status": "success", "data": final_detected_tags}  # Replace with the actual JSON data
save_report_to_mongo(json_report_data)

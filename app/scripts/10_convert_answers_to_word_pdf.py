# -*- coding: utf-8 -*-
"""10(10)_Convert_the_answers_in_Mongo_to_a_Word_document,_then_a_PDF_document.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tHIIZWLs7n4On0PVM9gSeBsPWuBT0CZC

## OPTON 2: Creating a new answers file with a new table within the owrd document
"""

!pip install python-docx

from pymongo import MongoClient
from docx import Document
from fpdf import FPDF
import datetime

# MongoDB Connection URI
mongo_uri = "mongodb+srv://AIDatabase:BTColombia2022@sandbox.bxohv.mongodb.net/?retryWrites=true&w=majority&appName=sandbox"
mongo_db_name = "AIDatabase"
mongo_collection = "Reports"  # Specify the collection name

# Connect to MongoDB
try:
    client = MongoClient(mongo_uri)
    db = client[mongo_db_name]
    collection = db[mongo_collection]
    print("Successfully connected to MongoDB!")
except Exception as e:
    print(f"Error connecting to MongoDB: {e}")
    exit()

# Function to convert Mongo data to Word and PDF documents
def generate_word_and_pdf_reports(report_data):
    try:
        # Create a Word document using python-docx
        doc = Document()
        doc.add_heading('Report', 0)

        # Add the data to the document
        doc.add_paragraph(f"Report Generated on: {datetime.datetime.now()}")
        doc.add_paragraph(f"Report Data: {report_data}")

        # Save the Word document
        word_file_path = "report.docx"
        doc.save(word_file_path)
        print(f"Word document saved as {word_file_path}")

        # Create a PDF document using FPDF
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        # Add the data to the PDF
        pdf.cell(200, 10, txt="Report", ln=True, align="C")
        pdf.cell(200, 10, txt=f"Report Generated on: {datetime.datetime.now()}", ln=True, align="L")
        pdf.cell(200, 10, txt=f"Report Data: {report_data}", ln=True, align="L")

        # Save the PDF document
        pdf_file_path = "report.pdf"
        pdf.output(pdf_file_path)
        print(f"PDF document saved as {pdf_file_path}")

        # Save the report in MongoDB with the generated files
        report_entry = {
            "report_data": report_data,
            "word_file": word_file_path,
            "pdf_file": pdf_file_path,
            "created_at": datetime.datetime.now()
        }

        collection.insert_one(report_entry)
        print("Report with Word and PDF files saved to MongoDB collection 'Reports'.")
    except Exception as e:
        print(f"Error generating Word and PDF reports: {e}")

# Example of using the function to generate a Word and PDF report
report_data = {"status": "success", "message": "Converted Mongo data to Word and PDF."}
generate_word_and_pdf_reports(report_data)

"""Moving the word document to a PDF document"""

import win32com.client

def convert_docx_to_pdf(docx_file, pdf_file):
    """
    Convert a DOCX file to PDF using Word application (Windows only).
    """
    word = win32com.client.Dispatch("Word.Application")
    doc = word.Documents.Open(docx_file)
    doc.SaveAs(pdf_file, FileFormat=17)  # 17 is the constant for PDF format
    doc.Close()
    word.Quit()
    print(f"PDF saved as {pdf_file}")

# Example usage
convert_docx_to_pdf('Questionnaire_Results.docx', 'Questionnaire_Results.pdf')
